* uncomment line 397 search for 'testing' for line 
* location doc id has to be same as dbname without location_ 
* check setup on windows  

* set timeout of connection to one minute 
* set allow-origin
to all possible locations quilt could be server from and then zip it
up for download
* set state.testing=false
* force https!  
* move all sites to linode or digital ocean  
* get cloudant to use pkdf2 or CouchDB version1.3+  
* setup own cert on own server so that https works
* setup couchdb server on own server using cert 
  
* make sure that apps databases have proper vdu
* make sure that all apps start up again after linode server reboots 
So random users can't add docs. See the vdu in couchappjs boilerplate app.js
  
* setup quilt.michieljoris.net and roster_help.michieljoris.net
* make couchapps out of quilt and roster_help 
* TODO
** add query to database table  
** regex the urls entered
url ending in letter after portnumber hangs
maybe do a timeout that resolves the promise in state.init ?

** make database list a table with multiselect, and bulk delete
** put select2 in the tables.?
** paging for users, databases and documents
** users info next to table as before
** full width pages
   
** in users: 
no second apply button, but a roles column, not editable and apply
applies all the changes to to the user database. Also bring select
checkbox back
   
* good to know
** couchapp
Using node couchapp
Has all the design docs in the app.js file:

var couchapp = require('couchapp')
  , path = require('path')
  ;

ddoc = 
  { _id:'_design/app'
  , rewrites : 
    [ {from:"/", to:'index.html'}
    , {from:"/api", to:'../../'}
    , {from:"/api/*", to:'../../*'}
    , {from:"/*", to:'/quilt/*'}
    ]
  }
  ;

ddoc.views = {};

ddoc.validate_doc_update = function (newDoc, oldDoc, userCtx) {   
  if (userCtx.roles.indexOf('_admin') === -1) {
    throw "Only admin can write documents to this database.";
  } 
  if (newDoc._deleted === true && userCtx.roles.indexOf('_admin') === -1) {
    throw "Only admin can delete documents on this database.";
  } 
}

couchapp.loadAttachments(ddoc, path.join(__dirname, '_attachments'));

module.exports = ddoc;

To push:
couchapp push app.js http://admin:admin@localhost:5984/rosterapp
But do npm install -g couchapp first 
And then install locally: npm install couchapp

** vhosts 
localhost:5984/quilt /quilt_app/_design/app/_rewrite
localhost:5984/quilt/app /quilt_app/_design/app/_rewrite
** local.ini settings
headers:accept, origin, authorization, content-type,
X-CouchDB-WWW-Authenticate, X-Couch-Full-Commit
methods:DELETE, GET, HEAD, POST, OPTIONS, PUT
credentials:true
enable_cors:true
origins:*


* Array of objects
** rewrites _rewrite

* Object of functions:

| Design doc entry        | /_design/ddName/X/fnName  | signature                         | returns to server             | fn should return                 |   |
|-------------------------+---------------------------+-----------------------------------+-------------------------------+----------------------------------+---|
| views:  { fnName:{} }   | _view                     | (doc)                             | object (with result rows)     | nothing                          |   |
| shows   same            | _show                     | (doc, req)                        | string (of eg html) or object | object or string                 |   |
| lists                   | _list                     | (head, req)                       | string (of eg html)           | nothing, but call send()         |   |
| updates                 | _update                   | (doc, req)                        | custom                        | [doc,resp]                       |   |
| filters                 | ?filter=ddName/filterName | (doc, req)                        |                               | boolean value                    |   |
| validate_doc_update: fn | N/A                       | (newDoc, oldDoc, userCtx, secObj) | N/A                           | throws forbidden or unauthorized |   |

  
* using filters in replication 
  Invoke them as follows;
  
{"source":"http://example.org/example-database","target":"http://admin:password@127.0.0.1:5984/example-database", "filter":"myddoc/myfilter"}
You can even pass arguments to them;

{"source":"http://example.org/example-database","target":"http://admin:password@127.0.0.1:5984/example-database", "filter":"myddoc/myfilter", "query_params": {"key":"value"}}
Named Document Replication

Sometimes you only want to replicate some documents. For this simple case you do not need to write a filter function. Simply add the list of keys in the doc_ids field;

{"source":"http://example.org/example-database","target":"http://admin:password@127.0.0.1:5984/example-database", "doc_ids":["foo","bar","baz]}



